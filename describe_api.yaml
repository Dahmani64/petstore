openapi: '3.0.3'
info:
  title: 'petstore'
  description: 'crud pets'
  version: '1.0'
servers:
  - url: http://localhost:8000/ #for me in local
components:
  schemas:
    Pet:
      # Definition of a "Pet" object
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        category:
          type: object
          properties:
              id:
                type: integer
              name:
                type: string
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        status:
          type: string
          enum:
            - "available"
            - "pending"
            - "sold"
paths:
  /api/pet/fibdByStatus:
     get:
      # GET /api/pet/fibdByStatus
      description: 'Get all the pets matching  search status'
      parameters:
        - name: status
          in: query
          description: 'Pet status'
          schema:
            type: array     
            
      responses:
        '200':
          description: 'List with all the Pets matching the search status'
          content:
            'application/json':
              schema:
                # Returns an array of "Pet" elements
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /api/pet/{id}:
    get:
      # GET /api/pet/{id}
      description: 'Return the details about the pet with the requested ID'
      parameters:
        - name: id
          in: path
          description: 'ID of the Pet to request'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The requested Pet'
          content:
            'application/json':
              schema:
                # Returns the requested Pet
                $ref: '#/components/schemas/Pet'
        '404':
          description: 'Pet not found'
        '400':
          description: 'Invalid ID supplied'

  /api/pet/{id}:
    delete:
      # DELETE /api/pet/{id}
      description: 'Delete the Pet with the specified ID'  
      security:
        - auth: []
      parameters:
        - name: id
          in: path
          description: 'ID of the Pet to delete'
          required: true
          schema:
            type: string       
      responses:
        '200':
          description: 'sucess deleted'         
        '404':
          description: 'Pet not found'
        '400':
          description: 'Invalid ID supplied'
  /api/pet:
    put:
      # PUT /api/pet
      description: 'Update the details about the Pet'
      requestBody:
        description: New details of the Pet to be modified
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Pet'    
      responses:
        '200':
          description: ''
          content:
            'application/json':
              schema:
                # Returns the  modified Pet
                $ref: '#/components/schemas/Pet'
        '404':
          description: 'Pet not found'
        '400':
          description: 'Invalid ID supplied'
  /api/pet:
      post:
        # POST /api/pet
        description: 'add new Pet'
        requestBody:
          description: details of the Pet to add
          required: true
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Pet'    
        responses:
          '200':
            description: ''
            content:
              'application/json':
                schema:
                  # Returns the  new Pet
                  $ref: '#/components/schemas/Pet'
  /api/pet/{petId}:
        post:
          # POST /api/pet/{petId}
          description: 'Update the details about the Pet with the specified ID'
          parameters:
            - name: id
              in: path
              description: 'ID of the Pet to modify'
              required: true
              schema:
                type: string
            - name: name
              in: query
              description: 'new name of Pet'
              required: true
              schema:
                type: string
            - name: status
              in: query
              description: 'new status of Pet'
              required: true
              schema:
                type: string
                enum: [available, pending, sold]
          requestBody:
            description: d
            required: true
            content:
              'application/json':
                schema:  
          responses:
            '200':
              description: 'update success'
            '404':
              description: 'Pet not found'
            '400':
              description: 'Invalid ID supplied'

  /api/pet/{petId}/uploadImage:
    post:
      # POST /api/pet/{petId}
      description: 'Update the details about the Pet with the specified ID'
      parameters:
        - name: id
          in: path
          description: 'ID of the Pet to modify'
          required: true
          schema:
            type: string
        - name: file
          in: query
          description: 'new image of Pet'
          required: false
          schema:
            type: string
        - name: additionalMetadata
          in: query
          description: 'Additional data to pass to server'
          required: false
          schema:
            type: string
      requestBody:
        description: z
        required: true
        content:
          'application/json':
            schema:  
      responses:
        '200':
          description: 'update success'
        '404':
          description: 'Pet not found'
        '400':
          description: 'Invalid ID supplied'